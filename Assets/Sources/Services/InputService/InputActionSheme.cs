//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Sources/Services/InputService/InputActionSheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionSheme: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionSheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionSheme"",
    ""maps"": [
        {
            ""name"": ""GameplayInput"",
            ""id"": ""054dcbaf-f8a7-4768-a885-f030c7a45fbc"",
            ""actions"": [
                {
                    ""name"": ""Aiming"",
                    ""type"": ""Value"",
                    ""id"": ""f016a990-d607-42b7-8ada-422b59389d59"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AimingButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""c077a74d-5b82-42e5-8a2b-b897ed523fc8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fac27b23-53c3-4c81-8a9f-7c0ce612dadd"",
                    ""path"": ""<Keyboard>/#(1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimingButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""2ac432e0-ace0-4720-af9d-d5db055547f6"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""a70e38b0-de37-47c9-90b4-2ea0b6e8b752"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""605b9a96-77a0-45a3-9f36-4e71e06b7808"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aiming"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MainMenuInput"",
            ""id"": ""ccc8b13e-a32a-4e33-999e-dbdaac51b6ba"",
            ""actions"": [
                {
                    ""name"": ""HandleMove"",
                    ""type"": ""Value"",
                    ""id"": ""f503de89-ab1e-4aca-8b69-f70eca07200d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""1de50bb9-b6fb-4fc1-94b3-e6f671da8877"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""a83b55af-d5a5-41e1-98b2-ecb47e4c930a"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Binding"",
                    ""id"": ""65694cb1-8576-44eb-b90f-c5a84fa5198d"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""473c2751-68a7-409f-ada3-75c9f3ae92d6"",
                    ""path"": ""OneModifier"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""bb4f99bf-c7cc-4501-9450-af21b1ed5da3"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""da398dc4-2085-42e9-96f1-9004a44e104a"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameplayInput
        m_GameplayInput = asset.FindActionMap("GameplayInput", throwIfNotFound: true);
        m_GameplayInput_Aiming = m_GameplayInput.FindAction("Aiming", throwIfNotFound: true);
        m_GameplayInput_AimingButtonPressed = m_GameplayInput.FindAction("AimingButtonPressed", throwIfNotFound: true);
        // MainMenuInput
        m_MainMenuInput = asset.FindActionMap("MainMenuInput", throwIfNotFound: true);
        m_MainMenuInput_HandleMove = m_MainMenuInput.FindAction("HandleMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameplayInput
    private readonly InputActionMap m_GameplayInput;
    private List<IGameplayInputActions> m_GameplayInputActionsCallbackInterfaces = new List<IGameplayInputActions>();
    private readonly InputAction m_GameplayInput_Aiming;
    private readonly InputAction m_GameplayInput_AimingButtonPressed;
    public struct GameplayInputActions
    {
        private @InputActionSheme m_Wrapper;
        public GameplayInputActions(@InputActionSheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @Aiming => m_Wrapper.m_GameplayInput_Aiming;
        public InputAction @AimingButtonPressed => m_Wrapper.m_GameplayInput_AimingButtonPressed;
        public InputActionMap Get() { return m_Wrapper.m_GameplayInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayInputActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayInputActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Add(instance);
            @Aiming.started += instance.OnAiming;
            @Aiming.performed += instance.OnAiming;
            @Aiming.canceled += instance.OnAiming;
            @AimingButtonPressed.started += instance.OnAimingButtonPressed;
            @AimingButtonPressed.performed += instance.OnAimingButtonPressed;
            @AimingButtonPressed.canceled += instance.OnAimingButtonPressed;
        }

        private void UnregisterCallbacks(IGameplayInputActions instance)
        {
            @Aiming.started -= instance.OnAiming;
            @Aiming.performed -= instance.OnAiming;
            @Aiming.canceled -= instance.OnAiming;
            @AimingButtonPressed.started -= instance.OnAimingButtonPressed;
            @AimingButtonPressed.performed -= instance.OnAimingButtonPressed;
            @AimingButtonPressed.canceled -= instance.OnAimingButtonPressed;
        }

        public void RemoveCallbacks(IGameplayInputActions instance)
        {
            if (m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayInputActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayInputActions @GameplayInput => new GameplayInputActions(this);

    // MainMenuInput
    private readonly InputActionMap m_MainMenuInput;
    private List<IMainMenuInputActions> m_MainMenuInputActionsCallbackInterfaces = new List<IMainMenuInputActions>();
    private readonly InputAction m_MainMenuInput_HandleMove;
    public struct MainMenuInputActions
    {
        private @InputActionSheme m_Wrapper;
        public MainMenuInputActions(@InputActionSheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @HandleMove => m_Wrapper.m_MainMenuInput_HandleMove;
        public InputActionMap Get() { return m_Wrapper.m_MainMenuInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuInputActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuInputActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuInputActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuInputActionsCallbackInterfaces.Add(instance);
            @HandleMove.started += instance.OnHandleMove;
            @HandleMove.performed += instance.OnHandleMove;
            @HandleMove.canceled += instance.OnHandleMove;
        }

        private void UnregisterCallbacks(IMainMenuInputActions instance)
        {
            @HandleMove.started -= instance.OnHandleMove;
            @HandleMove.performed -= instance.OnHandleMove;
            @HandleMove.canceled -= instance.OnHandleMove;
        }

        public void RemoveCallbacks(IMainMenuInputActions instance)
        {
            if (m_Wrapper.m_MainMenuInputActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuInputActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuInputActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuInputActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuInputActions @MainMenuInput => new MainMenuInputActions(this);
    public interface IGameplayInputActions
    {
        void OnAiming(InputAction.CallbackContext context);
        void OnAimingButtonPressed(InputAction.CallbackContext context);
    }
    public interface IMainMenuInputActions
    {
        void OnHandleMove(InputAction.CallbackContext context);
    }
}
